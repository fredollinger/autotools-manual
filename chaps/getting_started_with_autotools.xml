<?xml version="1.0"?> <!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter xmlns:xi="http://www.w3.org/2001/XInclude" id="getting_started_with_autotools">
	<title>Getting Started With Autotools</title>
    <section>
	<title> Initial configure.ac  </title>
    <para>
        In the top level of your project, create the simplest <filename>configure.ac</filename>. This file will eventually be turned into our <filename>configure</filename> file by <application>autoconf</application>.
    </para>
    <para><programlisting linenumbering="numbered"><![CDATA[
    AC_INIT([libabc], [1.0]) # BOILERPLATE BEGIN: name of lib and the version
    AC_OUTPUT   # BOILERPLATE END
    ]]></programlisting></para>

    <para>
    Note: this is the simplest example. But it does nothing. We can transform it to a do nothing <filename>configure</filename> and test it:
    </para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    autoconf 
    ./configure
    ]]></programlisting></para>

    </section>

    <section>
	<title> Initial Makefile.in  </title>

    <para>Next, let's make our initial <filename>Makefile.in</filename>. Again, we'll make a useless, do nothing file
    at first so we can getting a clearer picture of all the pieces:
    </para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    package        = @PACKAGE_NAME@
    SOURCES        = $(wildcard src/*.c)
    srcdir         = @srcdir@
    ]]></programlisting></para>

    <para>Now edit <filename>configure.ac</filename> and add the following:</para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    AC_CONFIG_FILES([Makefile]) # create top level Makefile from Makefile.in
    ]]></programlisting></para>

    <para>Thus, our new configure.ac looks like this:</para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    AC_INIT([libmtd], [1.0]) # BOILERPLATE BEGIN: name of lib and the version
    AC_CONFIG_FILES([Makefile]) # create top level Makefile from Makefile.in
    AC_OUTPUT   # BOILERPLATE END
    ]]></programlisting></para>

    </section>

    <section>
	<title> Basic Functionality  </title>

    <para>If it's a C or C++ library, we want to autodetect compiler or allow the user to specify it. Add the following to <filename>configure.ac</filename></para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    AC_C_INLINE # Find C compiler (gcc)
    ]]></programlisting></para>

    <para>
    Now add the compiler to the Makefile.in:
    </para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    CC  = @CC@
    ]]></programlisting></para>

    <para>Don't forget to rerun: </para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    autoconf 
    ./configure
    ]]></programlisting></para>

    <para>From now on, it will be assumed that each time you change 
    <filename>configure.ac</filename> and want a new 
    <filename>Makefile</filename>, you'll do the above.
    </para>

    <para>If we have C++, we need add this as well to <filename>configure.ac</filename></para>

    <para><programlisting linenumbering="numbered"><![CDATA[
    AC_LANG_CPLUSPLUS
    ]]></programlisting></para>

    <para>Instead of CC, we use CXX in our <filename>Makefile.in</filename></para>

    <para><programlisting><![CDATA[
    CXX = @CXX@
    ]]></programlisting></para>

    <para>Now we need to compile the code. Add to <filename>Makefile.in</filename></para>

    <para><programlisting><![CDATA[
    .c.o:
        $(CC) $(AM_CFLAGS) -c $< -o $@
    ]]></programlisting></para>

    <para>Note we need to get the AM_FLAGS. Add this to <filename>Makefile.in</filename></para>

    <para><programlisting><![CDATA[
    LIBDIR     = libs
    INCLUDEDIR = include
    CFLAGS     = @CFLAGS@ # user generated do not overwrite CFLAGS use AM_CFLAGS
    LDFLAGS    = @LDFLAGS@ 
    AM_CFLAGS  = -Wall -I$(INCLUDEDIR) -fPIC -fno-strict-aliasing -O2 -g -D_GNU_SOURCE $(CFLAGS)
    ]]></programlisting></para>

    <para>As the comment says, we don't want to add to <variable>CFLAGS</variable> because these will be overwritten. This is a good thing as it gives flexibility.</para>

    <para><programlisting><![CDATA[
    LIBDIR = libs
    SOURCES = $(wildcard *.c)
    OBJS = $(SOURCES:%.c=%.o)

    TARGET_LINK = $(package).so
    TARGET = $(TARGET_LINK).1.0.0

    all: $(TARGET)

    $(TARGET): $(OBJS)
        mkdir -p $(LIBDIR)
        $(CC) $(OBJS) $(AM_LDFLAGS) $(AM_CFLAGS) -o $(LIBDIR)/$(TARGET)
    ]]></programlisting></para>

    </section>

    <section>
	<title> Autotools Summary </title>

    <para>By now, we should have a working system that actually builds our library. Here's the <filename>Makefile.in</filename>:</para>

    <para><programlisting><![CDATA[
LIBDIR           = libs
INCLUDEDIR       = include

package        = @PACKAGE_NAME@
srcdir         = @srcdir@
CC             = @CC@
CFLAGS         = @CFLAGS@  # user generated do not overwrite CFLAGS use AM_CFLAGS
LDFLAGS        = @LDFLAGS@ # user generated do not overwrite LDFLAGS use AM_LDFLAGS. In this example none are needed.

AM_CFLAGS = -Wall -I$(INCLUDEDIR) -fPIC -fno-strict-aliasing -O2 -g -D_GNU_SOURCE $(CFLAGS)
AM_LDFLAGS = -shared -Wl,-soname,$(TARGET_LINK) -lpthread -ldl $(LDFLAGS)

SOURCES        = $(wildcard src/*.c)
OBJS           = $(SOURCES:%.c=%.o)

TARGET_LINK = $(package).so
TARGET = $(TARGET_LINK).1.0.0

all: $(TARGET)

$(TARGET): $(OBJS)
    mkdir -p $(LIBDIR)
    $(CC) $(OBJS) $(AM_LDFLAGS) $(AM_CFLAGS) -o $(LIBDIR)/$(TARGET)

.c.o:
    $(CC) $(AM_CFLAGS) -c $< -o $@
    ]]></programlisting></para>

    <para>Here's the <filename>configure.ac</filename>:</para>

    <para><programlisting><![CDATA[
AC_INIT([libmtd], [1.0]) # BOILERPLATE BEGIN: name of lib and the version
AC_C_INLINE # Find C compiler (gcc)
AC_CONFIG_FILES([Makefile]) # create top level Makefile from Makefile.in
AC_OUTPUT   # BOILERPLATE END
    ]]></programlisting></para>

    </section>



</chapter>
